name: Build and Deploy Apps
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  packages: write

jobs:
  build-nextjs:
    name: Build and push next.js image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: djmeph
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Yarn Cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-${{ runner.arch }}-yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-yarn-cache-

      - name: Install Node Modules
        shell: bash
        run: yarn install

      - name: Build app
        shell: bash
        run: yarn nx run digital-www-pwa:build:production
        env:
          NEXT_PUBLIC_API_BASE_URL: https://api.lakesoffire.breakfreeproductions.com
          SERVICE_WORKER_CACHE_ID: ${{ github.sha }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/digital-www-pwa/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ghcr.io/djmeph/digital-www-pwa
          cache-from: type=registry,ref=ghcr.io/djmeph/digital-www-pwa:buildcache
          cache-to: type=registry,ref=ghcr.io/djmeph/digital-www-pwa:buildcache,mode=max
          provenance: false

      - name: Store build hash as artifact
        shell: bash
        run: echo "digest=${{ steps.build.outputs.digest }}" > hash.txt

      - name: Archive build hash
        uses: actions/upload-artifact@v4
        with:
          name: build-hash-nextjs
          path: hash.txt
          retention-days: 90

  build-nestjs:
    name: Build and push nestjs image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: djmeph
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Yarn Cache
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-${{ runner.arch }}-yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-yarn-cache-

      - name: Install Node Modules
        shell: bash
        run: yarn install

      - name: Build app
        shell: bash
        run: yarn nx run api:build

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ghcr.io/djmeph/lakesoffire-api
          cache-from: type=registry,ref=ghcr.io/djmeph/lakesoffire-api:buildcache
          cache-to: type=registry,ref=ghcr.io/djmeph/lakesoffire-api:buildcache,mode=max
          provenance: false

      - name: Store build hash as artifact
        shell: bash
        run: echo "digest=${{ steps.build.outputs.digest }}" > hash.txt

      - name: Archive build hash
        uses: actions/upload-artifact@v4
        with:
          name: build-hash-nestjs
          path: hash.txt
          retention-days: 90

  deploy-nextjs:
    name: Deploy next.js app
    runs-on: ubuntu-latest
    environment: production
    needs: [build-nextjs]

    steps:
      - name: Retrieve build hash
        uses: actions/download-artifact@v4
        with:
          name: build-hash-nextjs

      - name: Extract build hash to output
        id: build-hash
        shell: bash
        run: cat hash.txt >> $GITHUB_OUTPUT

      - name: Deploy to Kubernetes
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: patch deployment prod-digital-www-2025 -n lakes-of-fire -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"digital-www-pwa\",\"image\":\"ghcr.io/djmeph/digital-www-pwa:latest@${{ steps.build-hash.outputs.digest }}\"}]}}}}"

  deploy-nestjs:
    name: Deploy nestjs app
    runs-on: ubuntu-latest
    environment: production
    needs: [build-nestjs]

    steps:
      - name: Retrieve build hash
        uses: actions/download-artifact@v4
        with:
          name: build-hash-nestjs

      - name: Extract build hash to output
        id: build-hash
        shell: bash
        run: cat hash.txt >> $GITHUB_OUTPUT

      - name: Deploy to Kubernetes
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: patch deployment prod-lakesoffire-api -n lakes-of-fire -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"api\",\"image\":\"ghcr.io/djmeph/lakesoffire-api:latest@${{ steps.build-hash.outputs.digest }}\"}]}}}}"
